// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Manager {
  id            String     @id @default(uuid())
  email         String     @unique
  name          String
  created_at    DateTime   @default(now())
  password      String
  isAdmin       Boolean    @default(false)
  isVerified    Boolean    @default(false)
  categories    Category[]
  authors       Author[]
  books         Book[]
  bookItems     BookItem[]
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  name          String
  created_at    DateTime   @default(now())
  password      String
  bookings      Booking[]
  bookingItems  BookingItem[]
}


model Category {
  id            String        @id @default(uuid())
  name          String
  created_at    DateTime      @default(now())
  manager       Manager       @relation(fields: [created_by], references: [id],onDelete: Cascade, onUpdate: Cascade)
  created_by    String
  books Book[]
}

model Author{
  id            String        @id @default(uuid())
  name          String
  created_at    DateTime      @default(now())
  manager       Manager       @relation(fields: [created_by], references: [id],onDelete: Cascade, onUpdate: Cascade)
  created_by    String
  books         Book[]
}

model Book{
  id            String        @id @default(uuid())
  ISBN          String
  title         String
  created_at    DateTime      @default(now())
  manager       Manager       @relation(fields: [created_by], references: [id],onDelete: Cascade, onUpdate: Cascade)
  created_by    String
  author        Author        @relation(fields: [author_id], references: [id],onDelete: Cascade, onUpdate: Cascade)
  author_id     String
  category      Category      @relation(fields: [category_id], references: [id],onDelete: Cascade, onUpdate: Cascade)
  category_id   String
  bookItems     BookItem[]
}

model BookItem{
  id                String        @id @default(uuid())
  acceptedDuration  Int
  isAvailable       Boolean       @default(true)
  rack              Int
  created_at        DateTime      @default(now())
  manager           Manager       @relation(fields: [created_by], references: [id],onDelete: Cascade, onUpdate: Cascade)
  created_by        String
  book              Book          @relation(fields: [book_id], references: [id],onDelete: Cascade, onUpdate: Cascade)
  book_id           String
  bookingItems      BookingItem[]
}

model Booking{
  id                String        @id @default(uuid())
  user              User          @relation(fields: [created_by], references: [id],onDelete: Cascade, onUpdate: Cascade)
  created_by        String
  created_at        DateTime      @default(now())
  bookingItems      BookingItem[]
}

model BookingItem{
  id                String          @id @default(uuid())
  user              User            @relation(fields: [created_by], references: [id],onDelete: Cascade, onUpdate: Cascade)
  created_by        String
  created_at        DateTime        @default(now())
  returned_at       DateTime?
  return_date       DateTime        @default(now())     
  bookItem          BookItem        @relation(fields: [book_item], references: [id],onDelete: Cascade, onUpdate: Cascade)
  book_item         String
  booking           Booking         @relation(fields: [booking_id], references: [id],onDelete: Cascade, onUpdate: Cascade)
  booking_id        String
}


// npx prisma migrate dev --name init